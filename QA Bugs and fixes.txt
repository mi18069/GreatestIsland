Process of developing

Phase 1: Implementing map loading and visualization

1. The biggest problem here was a good visual representation of one cell. I decided to make one standard Tile and add different colors to it in order to represent different heights. In order to do this I made a helper class that uses different gradients depending on height of cell. Since we're using different color palette for various terrains, firstly we choose which gradient should be used, and then function Transform is used for more precise information about color of cell.

2. Another problem that occurred while showing the board is that x and y axis are not following intuition to start at the top-left corner and advance on right-bottom. I considered solution where I'll have method inside my Map that will for passed coordinates x and y return mirror cell that we want to show, but I concluded that this solution will place methods for view in Map class which is only a structure for holding Cell[,] object with some additional informations. Other idea that I implemented was placing and rotating the main camera in order to follow x and y axis intuitional direction. When setting new game, I have method CenterCameraToMap(Map map) that centers camera on the grid ( useful when we have various dimensions of maps) and then rotate it on z-axis by 90 degrees.

Phase 2: Implementing island mechanics and ui

1. The biggest problem here is separation of concerns in code and ui. I decided that cells shouldn't keep an information if they are clicked, hovered on etc. That information should be kept in Island class. The hardest part here was not the execution ( I haven't found any bug worth mentioning ) but the idea how to solve the problem.

Phase 3: Implementing get request for gathering valid data

Phase 4: Implementing whole game logic

Phase 5: Adding extra features

1.  Showing average height over each island. Here, the problem was how to know at which point should I place each text with average height. I had a lot of trouble while I learned about prefabs, screen, tile and world positions. At the end, I extracted median cell for each island (sum of coordinates divided by number of cells that each island has). From there I get world coordinates from tilemap. I convert that into screen coordinates that my camera uses. Then I instantiate new prefab with text set to island average height and place it on screen coordinates ( whilst making sure that it is inside canvas so it can be rendered ).

Overall:
During the work on this game, I haven't found myself "stuck" in some bug. Of course, it happened all the time, but the problems were relatively easy to overcome. The start was a little bit insecure because I haven't worked on Unity very much, but as soon as I accommodated to this environment - everything was easier.
The biggest problems that I faced was how to make good visual for the game. Color blending was challenging so I decided to embrace the pixels in the game and make it look retro. Those were issues that kept happening every time I introduced some new feature, but no bug was worth mentioning by itself.

How would I test other people's project?

1. What happens when endpoint is unreachable?
2. What happens to invalid height values or values that are outside specified range?
3. What happens when response from endpoint doesn't have success status code?
4. What happens when given matrix doesn't have right dimensions?
5. Handling situation where more than one island is solution to problem.
6. Will map be presented well if given matrix is not rectangle?
7. How good is scaling for larger matrices?
8. Is each island visually distinct from water (case when height values are near 0)
9. What happens if I click on water or on the already selected island?

Extra features that I added:

1. Map rotating in one of 4 directions after loading
2. Mark for selected, missed and guessed islands
3. Camera shake on missed guess
4. Levels
5. Lives and timer showing on screen
6. Messages for more pleasant user experiences at the bottom of the screen
7. Main screen, game screen and end game screen
8. Showing average height when level ends
9. Pixelated cursor to match the game visual effects
10. Confirmation window for exiting game or finishing level on escape button press

Possible improvements:

1. Setting the game to be in 3d world
2. Add loading next map in the background while one is showing for getting the possibility to check if that map is the same as previous and to send request for another one
3. Add window for information about network issues if happens
4. Add different game modes such as:
	a) Explorer - Whole screen is dimmed, and only a range of tiles around cursor are visible
	b) Cloudy - Set clouds at some point so user can see only the top of islands
	c) Time challenge - Have only a couple of seconds to finish the level
	d) Mode where islands are wobbly / glitch / blur
	e) Mode where goal of game is different (find island with greatest area / tallest point ...)
5. Add multiplayer mode where users can race who will find first the right island

Work in this project was very interesting for me, so don't be surprised if you see some of mentioned improvements in near feature :)
